/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nschu
 */
public class ClienteUI extends javax.swing.JFrame {
  public static String relativePath = System.getProperty("user.dir"); //Ruta relativa de nuestro directorio
  public  static String nombreArchivo; //Aqui se guarda el nombre del archivo que estan en el servidor para desargar
  public  static String rutaArchivo; //Aqui se guarda  la ruta del archivo que estan en el servidor para desacargar
  private static ArrayList<String>   archivosNombre =new ArrayList<String>(); 
  private static ArrayList<String>   archivosRuta =new ArrayList<String>(); 
  private static  int r;
  private static  JFileChooser jf ;
  private static   File workingDirectory ;
  private static File[] f; 
  private  DefaultTableModel modeloTabla = new DefaultTableModel();  
  private static DefaultTableModel modeloTablaServidor = new DefaultTableModel();  
  private static final String IP = "localhost";
  private static final int PUERTO = 25001;
  private static Socket cl;
  private static File CarpetaServidor = new File(relativePath +"\\src\\archivosServidor");
  private static File[] listaArchivosSer = CarpetaServidor.listFiles();
  
  //private static  File CarpetaServidor;   
  //private static File[] listaArchivosSer; 
  /* Cliente cl1 = new Cliente();*/
    
    public ClienteUI() {
        estableceConexion(); 
        initComponents();
        setResizable(false);
        agregarModeloTabla();
        cargarArchivosServer();
        setLocationRelativeTo(null);
    }
    
    private void    agregarModeloTabla (){
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Ruta");
        modeloTablaServidor.addColumn("Nombre");
        modeloTablaServidor.addColumn("Ruta");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCliente = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaServidor = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        botonSubir = new javax.swing.JButton();
        botonSubir1 = new javax.swing.JButton();
        BotonSalir = new javax.swing.JButton();
        botonLimpiar = new javax.swing.JButton();
        botonActualizar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        exitBar = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Practica1");

        tablaCliente.setModel(modeloTabla);
        jScrollPane1.setViewportView(tablaCliente);

        tablaServidor.setModel(modeloTablaServidor);
        tablaServidor.setToolTipText("");
        ListSelectionListener oyenteDeSeleccion = new  ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent e){
                if(e.getValueIsAdjusting()){

                    int filaSeleccionada = tablaServidor.getSelectedRow();
                    nombreArchivo= (String)  modeloTablaServidor.getValueAt(filaSeleccionada, 0);
                    rutaArchivo= (String)  modeloTablaServidor.getValueAt(filaSeleccionada, 1);
                    System.out.println("Fila Seleccioanda");
                    System.out.println("Ruta: "+rutaArchivo);
                }
            }

        };

        tablaServidor.getSelectionModel().addListSelectionListener(oyenteDeSeleccion);
        jScrollPane2.setViewportView(tablaServidor);

        jLabel1.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        jLabel1.setText("Archivos Cliente ");

        jLabel2.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        jLabel2.setText("Archivos Servidor ");

        botonSubir.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        botonSubir.setText("Subir Archivos");
        botonSubir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSubirActionPerformed(evt);
            }
        });

        botonSubir1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        botonSubir1.setText("Descargar Archivos");
        botonSubir1.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
            botonDescargarActionPerformed(evt);
          }
        });


        BotonSalir.setText("Salir");
        BotonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalirActionPerformed(evt);
            }
        });

        botonLimpiar.setText("Limpiar");
        botonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarActionPerformed(evt);
            }
        });

        botonActualizar.setText("Actualizar Tabla");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(125, 125, 125))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(botonSubir, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonLimpiar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(botonSubir1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonActualizar)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BotonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel1)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)))
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonSubir1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonSubir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addComponent(BotonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        jMenu1.setText("File");

        jMenu3.setText("Open");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Seleccionar Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenu1.add(jMenu3);

        exitBar.setText("Exit");
        exitBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBarActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        exitBar.add(jMenuItem2);

        jMenu1.add(exitBar);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBarActionPerformed

    private void BotonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_BotonSalirActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
     
        
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
               System.out.println("Hola");
                   jf = new JFileChooser();
                    workingDirectory = new File(System.getProperty("user.dir"));
                    jf.setCurrentDirectory(workingDirectory);
                    jf.setMultiSelectionEnabled(true);
                    r = jf.showOpenDialog(null);
                    System.out.println("valor de jf: "+jf);
                    f = jf.getSelectedFiles();
                    System.out.println("Tamaño de F "+f.length);   
                   
                    for (int i = 0; i<f.length; i++) {
                       
                        
                        
                        //System.out.println("Archivo Nombre: "+archivosNombre.get(i)+ "  y ruta: "+archivosRuta.get(i));
                    
                       String nombre =f[i].getName();// declaar todo esto gllobal
                       String  ruta = f[i].getAbsolutePath();
                       String [] datos = {nombre , ruta};
                
                       modeloTabla.addRow(datos);// ponerlo a fuera 
                       
                    }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void botonSubirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSubirActionPerformed
      subir();
     
    }//GEN-LAST:event_botonSubirActionPerformed

  private void botonDescargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSubirActionPerformed
    descargar();

  }//GEN-LAST:event_botonSubirActionPerformed

    private void botonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarActionPerformed
        eliminarTabla();
    }//GEN-LAST:event_botonLimpiarActionPerformed

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        eliminarTablaServidor();
        cargarArchivosServer();
    }//GEN-LAST:event_botonActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteUI().setVisible(true);
            }
        });
        
      
        
    }

    private static void descargar(){
      System.out.println("Puchaste el boton descargar");
      if(rutaArchivo == null){
        System.out.println("Selecciona el archivo a descargar");
      } else{
        try {
          String opcion = "bajar";
          /*if(cl.isClosed()){
            System.out.println("El socket esta cerrado, estableciendo una nueva conexión");
            cl = new Socket(IP, PUERTO);
          }*/
          OutputStream os = cl.getOutputStream(); //Asociamos el stream con el cliente
          OutputStreamWriter osr = new OutputStreamWriter(os);
          BufferedWriter bw = new BufferedWriter(osr); //El BufferedWriter se usa para escribir del servidor al cliente.

          bw.write(opcion); //Le mandamos la instruccion al servidor de que queremos hacer
          bw.newLine();
          bw.flush();

          bw.write(rutaArchivo);
          bw.newLine();
          bw.flush();


          String ruta_archivos = relativePath+"\\src\\archivosCliente\\";
          System.out.println("Subir archivo");
          DataInputStream dis = new DataInputStream(cl.getInputStream());
          String nombre = dis.readUTF();
          long tam = dis.readLong();
          System.out.println("Comienza descarga del archivo " + nombre + " de " + tam + " bytes\n\n");
          DataOutputStream dos = new DataOutputStream(new FileOutputStream(ruta_archivos + nombre));
          long recibidos = 0;
          int l = 0, porcentaje = 0;
          while (recibidos < tam) {
            byte[] b = new byte[1500];
            l = dis.read(b);
            System.out.println("leidos: " + l);
            dos.write(b, 0, l);
            dos.flush();
            recibidos = recibidos + l;
            porcentaje = (int) ((recibidos * 100) / tam);
            System.out.print("\rRecibido el " + porcentaje + " % del archivo");
          }//while
          System.out.println("Archivo recibido..");
          //dos.close();
          //dis.close();
          //cl.close();

        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
    
    private  static void subir (){
        try {
            if(f == null){
              System.out.println("Porfavor selecciona los archivos a subir");
                JOptionPane.showMessageDialog(null,"Selecciona un archivo...");
            } else{
              String opcion = "subir";
              /*if(cl.isClosed()){
                System.out.println("El socket esta cerrado, estableciendo una nueva conexión");
                cl = new Socket(IP, PUERTO);
              }*/

              OutputStream os = cl.getOutputStream(); //Asociamos el stream con el cliente
              OutputStreamWriter osr = new OutputStreamWriter(os);
              BufferedWriter bw = new BufferedWriter(osr); //El BufferedWriter se usa para escribir del servidor al cliente.

              bw.write(opcion); //Le mandamos la instruccion al servidor de que queremos hacer
              bw.newLine();
              bw.flush();

              if(r==JFileChooser.APPROVE_OPTION) {
                String numeroArchivos = Integer.toString(f.length);
                bw.write(numeroArchivos); //Le mandamos el numero de archivos que hay
                bw.newLine();
                bw.flush();
                for (int i = 0; i < f.length; ++i) {
                  Socket cl2 = new Socket(IP, PUERTO);
                  System.out.println("-----Archivos xp: "+ f[i].getName());
                  System.out.println("Entra");
                  String nombre = f[i].getName();
                  String path = f[i].getAbsolutePath();
                  long tam = f[i].length();

                  System.out.println("Preparandose pare enviar archivo " + path + " de " + tam + " bytes\n\n");
                  DataInputStream dis = new DataInputStream(new FileInputStream(path));
                  DataOutputStream dos = new DataOutputStream(cl2.getOutputStream());
                  dos.writeUTF(nombre);
                  dos.flush();
                  dos.writeLong(tam);
                  dos.flush();
                  long enviados = 0;
                  int l = 0, porcentaje = 0;
                  while (enviados < tam) {
                    byte[] b = new byte[1500];
                    l = dis.read(b);
                    System.out.println("enviados: " + l);
                    dos.write(b, 0, l);
                    dos.flush();
                    enviados = enviados + l;
                    porcentaje = (int) ((enviados * 100) / tam);
                    System.out.print("\rEnviado el " + porcentaje + " % del archivo");
                  }//while
                  System.out.println("\nArchivo enviado..");
                  //dis.close();
                  //dos.close();
                  cl2.close();
                }
              }

              for (int i = 0; i<f.length; i++) {

                //System.out.println("Archivo Nombre: "+archivosNombre.get(i)+ "  y ruta: "+archivosRuta.get(i));

                String nombre =f[i].getName();// declaar todo esto gllobal
                String  ruta = f[i].getAbsolutePath();
                String [] datos = {nombre , ruta};

                modeloTablaServidor.addRow(datos);// ponerlo a fuera

              }

            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }
    
    public static  void cargarArchivosServer(){
         
        File CarpetaServidor = new File(relativePath +"\\src\\archivosServidor");
        File[] listaArchivosSer = CarpetaServidor.listFiles();
        for (int i = 0; i<listaArchivosSer.length; i++) {
                //System.out.println("Archivo Nombre: "+archivosNombre.get(i)+ "  y ruta: "+archivosRuta.get(i));
                    
                       String nombre =listaArchivosSer[i].getName();// declaar todo esto gllobal
                       String  ruta = listaArchivosSer[i].getAbsolutePath().toString();
                       String [] datos = {nombre , ruta};
                       modeloTablaServidor.addRow(datos);// ponerlo a fuera 
                       
                    }
    }
     
    
    public void eliminarTabla(){
        f=null;
        DefaultTableModel tb = (DefaultTableModel) tablaCliente.getModel();
        int a = tablaCliente.getRowCount()-1;
        for (int i = a; i >= 0; i--) {          
        tb.removeRow(tb.getRowCount()-1);
        
        }
}
 public void eliminarTablaServidor(){
        //f=null;
        DefaultTableModel tb = (DefaultTableModel) tablaServidor.getModel();
        int a = tablaServidor.getRowCount()-1;
        for (int i = a; i >= 0; i--) {          
        tb.removeRow(tb.getRowCount()-1);
        
        }
}    
    
  
    private static void  estableceConexion (){
        try{
            cl = new Socket(IP, PUERTO);
            System.out.println("Conexion con servidor establecida.. recibiendo datos");

            InputStream is = cl.getInputStream(); //Asociamos el stream con el cliente
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr); //El BufferedReader se usa para leer del cliente al servidor.

            OutputStream os = cl.getOutputStream(); //Asociamos el stream con el cliente
            OutputStreamWriter osr = new OutputStreamWriter(os);
            BufferedWriter bw = new BufferedWriter(osr); //El BufferedWriter se usa para escribir del servidor al cliente.

          

            File archivosCliente = new File(relativePath +"\\src\\archivosCliente");
            System.out.println("");
            System.out.println("Directorio actual: "+ archivosCliente.getAbsolutePath());
            System.out.println("");
            System.out.println("Archivos en mi computadora:");
            File[] listaArchivos = archivosCliente.listFiles();

            String archivos = "";

            for(File f: listaArchivos){
                if(f.isDirectory()){
                    System.out.println("Dir: "+ f.getName());
                    archivos += "Dir: "+f.getName() + "{salto}";
                } else{
                    System.out.println("File: "+f.getName());
                    archivos += "File: "+ f.getName() + "{salto}";
                }
            }

            bw.write(archivos); //Le mandamos los directorios que tenemos al servidor
            bw.newLine();
            bw.flush();

            String archivosServidor = br.readLine(); //Obtenemos los directorios del servidor

            System.out.println("Archivos del servidor: ");
            System.out.println(archivosServidor.replace("{salto}", "\n"));

            Scanner sc = new Scanner(System.in);
           // for(;;) {
                System.out.println("¿Que quieres hacer? \n 1) bajar \n 2) subir");
                //String opcion ="subir";

                //bw.write(opcion); //Le mandamos la instruccion al servidor de que queremos hacer
                //bw.newLine();
                //bw.flush();
                //System.out.println(opcion);
              //if(opcion.equalsIgnoreCase("subir")){
        }catch(IOException E){
            E.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonSalir;
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonLimpiar;
    private javax.swing.JButton botonSubir;
    private javax.swing.JButton botonSubir1;
    private javax.swing.JMenu exitBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panel;
    private javax.swing.JTable tablaCliente;
    private javax.swing.JTable tablaServidor;
    // End of variables declaration//GEN-END:variables
}
